title Mobile App Login

participant Mobile App as mobapp
participant Mobile SDK as mobsdk
participant RPA Backend as rpa

mobapp->mobsdk: setCid(<clientId>)
mobapp->mobsdk: setBackend(<backendUrl>)
mobsdk-->mobapp: Status OK
mobapp->mobsdk: listUsers(&usersList)
note right of mobapp
	NOTE: The diagram assumes that there is a completed registration. 
	The registration flow is listed separately.
end note
mobsdk-->mobapp: Status OK, populated <usersList>
mobapp->rpa: GET /authzurl
rpa-->mobapp: OK, data: { authorizeURL }
mobapp->mobsdk: getAccessCode(<authorizeURL>, &accessCode)
mobsdk-->mobapp: Status OK, populated <accessCode>
mobapp->mobsdk: startAuthentication(<user>, <accessCode>)
mobsdk-->mobapp: Status OK
mobapp->mobapp: Get PIN from end-user
mobapp->mobsdk: finishAuthentication(<user>, <PIN>, <accessCode>, &authzCode)
mobsdk-->mobapp: Status OK, populated <authzCode>
mobapp->rpa: App-sepcific request for data or for authentication validation, pass <userId>, <authzCode>
rpa-->mobapp: App-specific response, pass back either\nAccess Token or app-specific Authentication Token
mobapp<->rpa: Get data using provided Token